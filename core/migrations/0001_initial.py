# Generated by Django 3.0 on 2020-12-23 09:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=30, verbose_name='First name')),
                ('last_name', models.CharField(max_length=150, verbose_name='Last name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email address')),
                ('sur_name', models.CharField(max_length=150, verbose_name='Sur name')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Auction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Date of auction creation')),
                ('name', models.CharField(max_length=256, verbose_name='Auction name')),
                ('description', models.CharField(max_length=1024, verbose_name='Product description')),
                ('start_price', models.PositiveIntegerField(verbose_name='Starting price')),
                ('price_step', models.PositiveIntegerField(verbose_name='Price step')),
                ('actual_price', models.PositiveIntegerField(verbose_name='Actual price')),
                ('expire_at', models.DateTimeField(verbose_name='Expiration date')),
                ('is_active', models.BooleanField(blank=True, default=True, verbose_name='Is active?')),
            ],
            options={
                'verbose_name': 'Auction',
                'verbose_name_plural': 'Auctions',
            },
        ),
        migrations.CreateModel(
            name='Bet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Date of bet creation')),
                ('size', models.PositiveIntegerField(verbose_name='Bet size')),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='all_bets', to='core.Auction', verbose_name='Auction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='all_bets', to=settings.AUTH_USER_MODEL, verbose_name='Bet owner')),
            ],
            options={
                'verbose_name': 'Bet',
                'verbose_name_plural': 'Bets',
            },
        ),
        migrations.AddField(
            model_name='auction',
            name='bets',
            field=models.ManyToManyField(through='core.Bet', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='auction',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='auctions', to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
    ]
